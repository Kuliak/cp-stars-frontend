/* tslint:disable */
/* eslint-disable */
/**
 * Chemically Peculiar Stars Database OpenAPI definitions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';

/**
 *
 * @export
 * @interface Star
 */
export interface Star {
  /**
   *
   * @type {number}
   * @memberof Star
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof Star
   */
  consideredCategoryAffiliationProbabilityFlag?: string;
  /**
   *
   * @type {string}
   * @memberof Star
   */
  renson?: string;
  /**
   *
   * @type {string}
   * @memberof Star
   */
  binarySystemComponent?: string;
  /**
   *
   * @type {number}
   * @memberof Star
   */
  icrsRightAscension?: number;
  /**
   *
   * @type {number}
   * @memberof Star
   */
  icrsRightAscensionError?: number;
  /**
   *
   * @type {number}
   * @memberof Star
   */
  icrsDeclination?: number;
  /**
   *
   * @type {number}
   * @memberof Star
   */
  icrsDeclinationError?: number;
  /**
   *
   * @type {number}
   * @memberof Star
   */
  galacticLongitude?: number;
  /**
   *
   * @type {number}
   * @memberof Star
   */
  galacticLatitude?: number;
  /**
   *
   * @type {string}
   * @memberof Star
   */
  alpha?: string;
  /**
   *
   * @type {string}
   * @memberof Star
   */
  delta?: string;
}

/**
 * Check if a given object implements the Star interface.
 */
export function instanceOfStar(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;

  return isInstance;
}

export function StarFromJSON(json: any): Star {
  return StarFromJSONTyped(json, false);
}

export function StarFromJSONTyped(json: any, ignoreDiscriminator: boolean): Star {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    consideredCategoryAffiliationProbabilityFlag: !exists(
      json,
      'consideredCategoryAffiliationProbabilityFlag'
    )
      ? undefined
      : json['consideredCategoryAffiliationProbabilityFlag'],
    renson: !exists(json, 'renson') ? undefined : json['renson'],
    binarySystemComponent: !exists(json, 'binarySystemComponent')
      ? undefined
      : json['binarySystemComponent'],
    icrsRightAscension: !exists(json, 'icrsRightAscension')
      ? undefined
      : json['icrsRightAscension'],
    icrsRightAscensionError: !exists(json, 'icrsRightAscensionError')
      ? undefined
      : json['icrsRightAscensionError'],
    icrsDeclination: !exists(json, 'icrsDeclination') ? undefined : json['icrsDeclination'],
    icrsDeclinationError: !exists(json, 'icrsDeclinationError')
      ? undefined
      : json['icrsDeclinationError'],
    galacticLongitude: !exists(json, 'galacticLongitude') ? undefined : json['galacticLongitude'],
    galacticLatitude: !exists(json, 'galacticLatitude') ? undefined : json['galacticLatitude'],
    alpha: !exists(json, 'alpha') ? undefined : json['alpha'],
    delta: !exists(json, 'delta') ? undefined : json['delta'],
  };
}

export function StarToJSON(value?: Star | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    consideredCategoryAffiliationProbabilityFlag:
      value.consideredCategoryAffiliationProbabilityFlag,
    renson: value.renson,
    binarySystemComponent: value.binarySystemComponent,
    icrsRightAscension: value.icrsRightAscension,
    icrsRightAscensionError: value.icrsRightAscensionError,
    icrsDeclination: value.icrsDeclination,
    icrsDeclinationError: value.icrsDeclinationError,
    galacticLongitude: value.galacticLongitude,
    galacticLatitude: value.galacticLatitude,
    alpha: value.alpha,
    delta: value.delta,
  };
}
