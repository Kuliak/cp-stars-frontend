/* tslint:disable */
/* eslint-disable */
/**
 * Chemically Peculiar Stars Database OpenAPI definitions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DataSource } from './DataSource';
import {
    DataSourceFromJSON,
    DataSourceFromJSONTyped,
    DataSourceToJSON,
} from './DataSource';
import type { Star } from './Star';
import {
    StarFromJSON,
    StarFromJSONTyped,
    StarToJSON,
} from './Star';

/**
 * 
 * @export
 * @interface Motion
 */
export interface Motion {
    /**
     * 
     * @type {number}
     * @memberof Motion
     */
    id: number;
    /**
     * 
     * @type {Star}
     * @memberof Motion
     */
    star?: Star;
    /**
     * 
     * @type {DataSource}
     * @memberof Motion
     */
    datasource: DataSource;
    /**
     * 
     * @type {number}
     * @memberof Motion
     */
    properMotionRa?: number;
    /**
     * 
     * @type {number}
     * @memberof Motion
     */
    properMotionRaError?: number;
    /**
     * 
     * @type {number}
     * @memberof Motion
     */
    properMotionDec?: number;
    /**
     * 
     * @type {number}
     * @memberof Motion
     */
    properMotionDecError?: number;
    /**
     * 
     * @type {number}
     * @memberof Motion
     */
    parallax?: number;
    /**
     * 
     * @type {number}
     * @memberof Motion
     */
    parallaxError?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Motion
     */
    defined?: boolean;
}

/**
 * Check if a given object implements the Motion interface.
 */
export function instanceOfMotion(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "datasource" in value;

    return isInstance;
}

export function MotionFromJSON(json: any): Motion {
    return MotionFromJSONTyped(json, false);
}

export function MotionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Motion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'star': !exists(json, 'star') ? undefined : StarFromJSON(json['star']),
        'datasource': DataSourceFromJSON(json['datasource']),
        'properMotionRa': !exists(json, 'properMotionRa') ? undefined : json['properMotionRa'],
        'properMotionRaError': !exists(json, 'properMotionRaError') ? undefined : json['properMotionRaError'],
        'properMotionDec': !exists(json, 'properMotionDec') ? undefined : json['properMotionDec'],
        'properMotionDecError': !exists(json, 'properMotionDecError') ? undefined : json['properMotionDecError'],
        'parallax': !exists(json, 'parallax') ? undefined : json['parallax'],
        'parallaxError': !exists(json, 'parallaxError') ? undefined : json['parallaxError'],
        'defined': !exists(json, 'defined') ? undefined : json['defined'],
    };
}

export function MotionToJSON(value?: Motion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'star': StarToJSON(value.star),
        'datasource': DataSourceToJSON(value.datasource),
        'properMotionRa': value.properMotionRa,
        'properMotionRaError': value.properMotionRaError,
        'properMotionDec': value.properMotionDec,
        'properMotionDecError': value.properMotionDecError,
        'parallax': value.parallax,
        'parallaxError': value.parallaxError,
        'defined': value.defined,
    };
}

